/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Todo API
 * A simple todo API built with Go and Gin framework
 * OpenAPI spec version: 1.0
 */

import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { useMutation, useQuery } from '@tanstack/react-query'
import { customInstance } from './mutator'
import type {
  GetApiV1Todos200,
  GetApiV1TodosId200,
  GetHealth200,
  HandlerAPIResponse,
  PostApiV1Todos201,
  PutApiV1TodosId200,
  RequestCreateTodoRequest,
  RequestUpdateTodoRequest,
  ResponseErrorResponse,
} from './types'

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Get a list of all todos
 * @summary Get all todos
 */
export const getApiV1Todos = (options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<GetApiV1Todos200>({ url: `/api/v1/todos`, method: 'GET', signal }, options)
}

export const getGetApiV1TodosQueryKey = () => {
  return [`/api/v1/todos`] as const
}

export const getGetApiV1TodosQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1Todos>>,
  TError = ResponseErrorResponse,
>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Todos>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1TodosQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1Todos>>> = ({ signal }) =>
    getApiV1Todos(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1Todos>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1TodosQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1Todos>>>
export type GetApiV1TodosQueryError = ResponseErrorResponse

export function useGetApiV1Todos<TData = Awaited<ReturnType<typeof getApiV1Todos>>, TError = ResponseErrorResponse>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Todos>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Todos>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Todos>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Todos<TData = Awaited<ReturnType<typeof getApiV1Todos>>, TError = ResponseErrorResponse>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Todos>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1Todos>>,
          TError,
          Awaited<ReturnType<typeof getApiV1Todos>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1Todos<TData = Awaited<ReturnType<typeof getApiV1Todos>>, TError = ResponseErrorResponse>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Todos>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get all todos
 */

export function useGetApiV1Todos<TData = Awaited<ReturnType<typeof getApiV1Todos>>, TError = ResponseErrorResponse>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1Todos>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiV1TodosQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Create a new todo item
 * @summary Create a new todo
 */
export const postApiV1Todos = (
  requestCreateTodoRequest: RequestCreateTodoRequest,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<PostApiV1Todos201>(
    {
      url: `/api/v1/todos`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: requestCreateTodoRequest,
      signal,
    },
    options,
  )
}

export const getPostApiV1TodosMutationOptions = <
  TError = ResponseErrorResponse | ResponseErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1Todos>>,
    TError,
    { data: RequestCreateTodoRequest },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof postApiV1Todos>>,
  TError,
  { data: RequestCreateTodoRequest },
  TContext
> => {
  const mutationKey = ['postApiV1Todos']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiV1Todos>>, { data: RequestCreateTodoRequest }> = (
    props,
  ) => {
    const { data } = props ?? {}

    return postApiV1Todos(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PostApiV1TodosMutationResult = NonNullable<Awaited<ReturnType<typeof postApiV1Todos>>>
export type PostApiV1TodosMutationBody = RequestCreateTodoRequest
export type PostApiV1TodosMutationError = ResponseErrorResponse | ResponseErrorResponse

/**
 * @summary Create a new todo
 */
export const usePostApiV1Todos = <TError = ResponseErrorResponse | ResponseErrorResponse, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof postApiV1Todos>>,
      TError,
      { data: RequestCreateTodoRequest },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof postApiV1Todos>>,
  TError,
  { data: RequestCreateTodoRequest },
  TContext
> => {
  const mutationOptions = getPostApiV1TodosMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * Delete a todo item by its ID
 * @summary Delete a todo
 */
export const deleteApiV1TodosId = (id: number, options?: SecondParameter<typeof customInstance>) => {
  return customInstance<HandlerAPIResponse>({ url: `/api/v1/todos/${id}`, method: 'DELETE' }, options)
}

export const getDeleteApiV1TodosIdMutationOptions = <
  TError = ResponseErrorResponse | ResponseErrorResponse | ResponseErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1TodosId>>, TError, { id: number }, TContext>
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1TodosId>>, TError, { id: number }, TContext> => {
  const mutationKey = ['deleteApiV1TodosId']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiV1TodosId>>, { id: number }> = (props) => {
    const { id } = props ?? {}

    return deleteApiV1TodosId(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type DeleteApiV1TodosIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiV1TodosId>>>

export type DeleteApiV1TodosIdMutationError = ResponseErrorResponse | ResponseErrorResponse | ResponseErrorResponse

/**
 * @summary Delete a todo
 */
export const useDeleteApiV1TodosId = <
  TError = ResponseErrorResponse | ResponseErrorResponse | ResponseErrorResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<Awaited<ReturnType<typeof deleteApiV1TodosId>>, TError, { id: number }, TContext>
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<Awaited<ReturnType<typeof deleteApiV1TodosId>>, TError, { id: number }, TContext> => {
  const mutationOptions = getDeleteApiV1TodosIdMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * Get a single todo by its ID
 * @summary Get a todo by ID
 */
export const getApiV1TodosId = (id: number, options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<GetApiV1TodosId200>({ url: `/api/v1/todos/${id}`, method: 'GET', signal }, options)
}

export const getGetApiV1TodosIdQueryKey = (id?: number) => {
  return [`/api/v1/todos/${id}`] as const
}

export const getGetApiV1TodosIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getApiV1TodosId>>,
  TError = ResponseErrorResponse | ResponseErrorResponse | ResponseErrorResponse,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1TodosId>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetApiV1TodosIdQueryKey(id)

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1TodosId>>> = ({ signal }) =>
    getApiV1TodosId(id, requestOptions, signal)

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getApiV1TodosId>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiV1TodosIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiV1TodosId>>>
export type GetApiV1TodosIdQueryError = ResponseErrorResponse | ResponseErrorResponse | ResponseErrorResponse

export function useGetApiV1TodosId<
  TData = Awaited<ReturnType<typeof getApiV1TodosId>>,
  TError = ResponseErrorResponse | ResponseErrorResponse | ResponseErrorResponse,
>(
  id: number,
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1TodosId>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1TodosId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1TodosId>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1TodosId<
  TData = Awaited<ReturnType<typeof getApiV1TodosId>>,
  TError = ResponseErrorResponse | ResponseErrorResponse | ResponseErrorResponse,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1TodosId>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiV1TodosId>>,
          TError,
          Awaited<ReturnType<typeof getApiV1TodosId>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiV1TodosId<
  TData = Awaited<ReturnType<typeof getApiV1TodosId>>,
  TError = ResponseErrorResponse | ResponseErrorResponse | ResponseErrorResponse,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1TodosId>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Get a todo by ID
 */

export function useGetApiV1TodosId<
  TData = Awaited<ReturnType<typeof getApiV1TodosId>>,
  TError = ResponseErrorResponse | ResponseErrorResponse | ResponseErrorResponse,
>(
  id: number,
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiV1TodosId>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetApiV1TodosIdQueryOptions(id, options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Update an existing todo item
 * @summary Update a todo
 */
export const putApiV1TodosId = (
  id: number,
  requestUpdateTodoRequest: RequestUpdateTodoRequest,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<PutApiV1TodosId200>(
    {
      url: `/api/v1/todos/${id}`,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      data: requestUpdateTodoRequest,
    },
    options,
  )
}

export const getPutApiV1TodosIdMutationOptions = <
  TError = ResponseErrorResponse | ResponseErrorResponse | ResponseErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof putApiV1TodosId>>,
    TError,
    { id: number; data: RequestUpdateTodoRequest },
    TContext
  >
  request?: SecondParameter<typeof customInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof putApiV1TodosId>>,
  TError,
  { id: number; data: RequestUpdateTodoRequest },
  TContext
> => {
  const mutationKey = ['putApiV1TodosId']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof putApiV1TodosId>>,
    { id: number; data: RequestUpdateTodoRequest }
  > = (props) => {
    const { id, data } = props ?? {}

    return putApiV1TodosId(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PutApiV1TodosIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiV1TodosId>>>
export type PutApiV1TodosIdMutationBody = RequestUpdateTodoRequest
export type PutApiV1TodosIdMutationError = ResponseErrorResponse | ResponseErrorResponse | ResponseErrorResponse

/**
 * @summary Update a todo
 */
export const usePutApiV1TodosId = <
  TError = ResponseErrorResponse | ResponseErrorResponse | ResponseErrorResponse,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof putApiV1TodosId>>,
      TError,
      { id: number; data: RequestUpdateTodoRequest },
      TContext
    >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof putApiV1TodosId>>,
  TError,
  { id: number; data: RequestUpdateTodoRequest },
  TContext
> => {
  const mutationOptions = getPutApiV1TodosIdMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}

/**
 * Check if the API server is running
 * @summary Health check endpoint
 */
export const getHealth = (options?: SecondParameter<typeof customInstance>, signal?: AbortSignal) => {
  return customInstance<GetHealth200>({ url: `/health`, method: 'GET', signal }, options)
}

export const getGetHealthQueryKey = () => {
  return [`/health`] as const
}

export const getGetHealthQueryOptions = <TData = Awaited<ReturnType<typeof getHealth>>, TError = unknown>(options?: {
  query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>>
  request?: SecondParameter<typeof customInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetHealthQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getHealth>>> = ({ signal }) =>
    getHealth(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getHealth>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetHealthQueryResult = NonNullable<Awaited<ReturnType<typeof getHealth>>>
export type GetHealthQueryError = unknown

export function useGetHealth<TData = Awaited<ReturnType<typeof getHealth>>, TError = unknown>(
  options: {
    query: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>> &
      Pick<
        DefinedInitialDataOptions<Awaited<ReturnType<typeof getHealth>>, TError, Awaited<ReturnType<typeof getHealth>>>,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHealth<TData = Awaited<ReturnType<typeof getHealth>>, TError = unknown>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>> &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getHealth>>,
          TError,
          Awaited<ReturnType<typeof getHealth>>
        >,
        'initialData'
      >
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetHealth<TData = Awaited<ReturnType<typeof getHealth>>, TError = unknown>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Health check endpoint
 */

export function useGetHealth<TData = Awaited<ReturnType<typeof getHealth>>, TError = unknown>(
  options?: {
    query?: Partial<UseQueryOptions<Awaited<ReturnType<typeof getHealth>>, TError, TData>>
    request?: SecondParameter<typeof customInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {
  const queryOptions = getGetHealthQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>
  }

  query.queryKey = queryOptions.queryKey

  return query
}
