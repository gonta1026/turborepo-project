// Code generated by mockery v2.53.5. DO NOT EDIT.

package mock

import (
	external "api/app/external"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockNotificationClient is an autogenerated mock type for the NotificationClient type
type MockNotificationClient struct {
	mock.Mock
}

type MockNotificationClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotificationClient) EXPECT() *MockNotificationClient_Expecter {
	return &MockNotificationClient_Expecter{mock: &_m.Mock}
}

// BatchSendNotifications provides a mock function with given fields: ctx, reqs
func (_m *MockNotificationClient) BatchSendNotifications(ctx context.Context, reqs []*external.NotificationRequest) ([]*external.NotificationResponse, error) {
	ret := _m.Called(ctx, reqs)

	if len(ret) == 0 {
		panic("no return value specified for BatchSendNotifications")
	}

	var r0 []*external.NotificationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*external.NotificationRequest) ([]*external.NotificationResponse, error)); ok {
		return rf(ctx, reqs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*external.NotificationRequest) []*external.NotificationResponse); ok {
		r0 = rf(ctx, reqs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*external.NotificationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*external.NotificationRequest) error); ok {
		r1 = rf(ctx, reqs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotificationClient_BatchSendNotifications_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BatchSendNotifications'
type MockNotificationClient_BatchSendNotifications_Call struct {
	*mock.Call
}

// BatchSendNotifications is a helper method to define mock.On call
//   - ctx context.Context
//   - reqs []*external.NotificationRequest
func (_e *MockNotificationClient_Expecter) BatchSendNotifications(ctx interface{}, reqs interface{}) *MockNotificationClient_BatchSendNotifications_Call {
	return &MockNotificationClient_BatchSendNotifications_Call{Call: _e.mock.On("BatchSendNotifications", ctx, reqs)}
}

func (_c *MockNotificationClient_BatchSendNotifications_Call) Run(run func(ctx context.Context, reqs []*external.NotificationRequest)) *MockNotificationClient_BatchSendNotifications_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*external.NotificationRequest))
	})
	return _c
}

func (_c *MockNotificationClient_BatchSendNotifications_Call) Return(_a0 []*external.NotificationResponse, _a1 error) *MockNotificationClient_BatchSendNotifications_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotificationClient_BatchSendNotifications_Call) RunAndReturn(run func(context.Context, []*external.NotificationRequest) ([]*external.NotificationResponse, error)) *MockNotificationClient_BatchSendNotifications_Call {
	_c.Call.Return(run)
	return _c
}

// GetNotificationStatus provides a mock function with given fields: ctx, notificationID
func (_m *MockNotificationClient) GetNotificationStatus(ctx context.Context, notificationID string) (string, error) {
	ret := _m.Called(ctx, notificationID)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationStatus")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, notificationID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, notificationID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, notificationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotificationClient_GetNotificationStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetNotificationStatus'
type MockNotificationClient_GetNotificationStatus_Call struct {
	*mock.Call
}

// GetNotificationStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - notificationID string
func (_e *MockNotificationClient_Expecter) GetNotificationStatus(ctx interface{}, notificationID interface{}) *MockNotificationClient_GetNotificationStatus_Call {
	return &MockNotificationClient_GetNotificationStatus_Call{Call: _e.mock.On("GetNotificationStatus", ctx, notificationID)}
}

func (_c *MockNotificationClient_GetNotificationStatus_Call) Run(run func(ctx context.Context, notificationID string)) *MockNotificationClient_GetNotificationStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockNotificationClient_GetNotificationStatus_Call) Return(_a0 string, _a1 error) *MockNotificationClient_GetNotificationStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotificationClient_GetNotificationStatus_Call) RunAndReturn(run func(context.Context, string) (string, error)) *MockNotificationClient_GetNotificationStatus_Call {
	_c.Call.Return(run)
	return _c
}

// SendNotification provides a mock function with given fields: ctx, req
func (_m *MockNotificationClient) SendNotification(ctx context.Context, req *external.NotificationRequest) (*external.NotificationResponse, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SendNotification")
	}

	var r0 *external.NotificationResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *external.NotificationRequest) (*external.NotificationResponse, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *external.NotificationRequest) *external.NotificationResponse); ok {
		r0 = rf(ctx, req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*external.NotificationResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *external.NotificationRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNotificationClient_SendNotification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendNotification'
type MockNotificationClient_SendNotification_Call struct {
	*mock.Call
}

// SendNotification is a helper method to define mock.On call
//   - ctx context.Context
//   - req *external.NotificationRequest
func (_e *MockNotificationClient_Expecter) SendNotification(ctx interface{}, req interface{}) *MockNotificationClient_SendNotification_Call {
	return &MockNotificationClient_SendNotification_Call{Call: _e.mock.On("SendNotification", ctx, req)}
}

func (_c *MockNotificationClient_SendNotification_Call) Run(run func(ctx context.Context, req *external.NotificationRequest)) *MockNotificationClient_SendNotification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*external.NotificationRequest))
	})
	return _c
}

func (_c *MockNotificationClient_SendNotification_Call) Return(_a0 *external.NotificationResponse, _a1 error) *MockNotificationClient_SendNotification_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNotificationClient_SendNotification_Call) RunAndReturn(run func(context.Context, *external.NotificationRequest) (*external.NotificationResponse, error)) *MockNotificationClient_SendNotification_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotificationClient creates a new instance of MockNotificationClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotificationClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotificationClient {
	mock := &MockNotificationClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
