name: Reusable Full Stack Deploy
on:
  workflow_call:
    inputs:
      ENVIRONMENT:
        required: true
        type: string
        description: "Target environment (dev)"
      PROJECT_ID:
        required: true
        type: string
        description: "GCP Project ID"
      REGION:
        required: true
        type: string
        description: "GCP Region"
      VPC_CONNECTOR_NAME:
        required: true
        type: string
        description: "VPC Connector name"
      API_SERVICE_NAME:
        required: true
        type: string
        description: "Cloud Run API service name"
      DASHBOARD_SERVICE_NAME:
        required: true
        type: string
        description: "Cloud Run Dashboard service name"
      API_BASE_URL:
        required: true
        type: string
        description: "API base URL"
      DASHBOARD_BASE_URL:
        required: true
        type: string
        description: "Dashboard base URL"
    secrets:
      db-password:
        required: true
      wif-provider:
        required: true
      service-account:
        required: true
      gcs-bucket-name:
        required: true
      cdn-url-map-name:
        required: true

jobs:
  # 統合ビルド・デプロイ: 全ての処理を一つのジョブで実行
  deploy-all:
    runs-on: ubuntu-latest
    environment: ${{ inputs.ENVIRONMENT }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js for Change Detection
        uses: actions/setup-node@v4
        with:
          node-version: "22.10.0"

      - name: Install Dependencies for Change Detection
        run: |
          rm -rf node_modules package-lock.json
          npm install

      # Turborepo変更検知: 各アプリケーションの変更を個別に検知
      - name: Detect Changes with Turbo
        id: turbo-changes
        run: |
          echo "🔍 Checking for changes using Turborepo..."
          
          # APIアプリケーションの変更チェック
          if npx turbo run build --filter=api --dry-run=json | jq -r '.tasks[] | select(.package == "api") | .cache.status' | grep -q "MISS"; then
            echo "api-changed=true" >> $GITHUB_OUTPUT
            echo "🔄 API changes detected - will deploy"
          else
            echo "api-changed=false" >> $GITHUB_OUTPUT  
            echo "✅ API unchanged - skipping deployment"
          fi
          
          # Dashboardアプリケーションの変更チェック
          if npx turbo run build --filter=dashboard --dry-run=json | jq -r '.tasks[] | select(.package == "dashboard") | .cache.status' | grep -q "MISS"; then
            echo "dashboard-changed=true" >> $GITHUB_OUTPUT
            echo "🔄 Dashboard changes detected - will deploy"
          else
            echo "dashboard-changed=false" >> $GITHUB_OUTPUT
            echo "✅ Dashboard unchanged - skipping deployment"
          fi
          
          echo "📋 Turbo analysis:"
          npx turbo run build --filter=api,dashboard --dry-run=json | jq -r '.tasks[] | "\(.package): \(.cache.status)"'

      # Turborepoキャッシュ更新: 変更されたアプリケーションのビルド結果をキャッシュに保存
      - name: Update Turbo Cache for Changed Apps
        run: |
          echo "🔄 Updating Turborepo cache for changed applications..."
          
          if [ "${{ steps.turbo-changes.outputs.api-changed }}" == "true" ]; then
            echo "📦 Updating cache for API application..."
            turbo run build --filter=api
          fi
          
          if [ "${{ steps.turbo-changes.outputs.dashboard-changed }}" == "true" ]; then
            echo "📦 Updating cache for Dashboard application..."
            turbo run build --filter=dashboard
          fi
          
          echo "✅ Turbo cache update completed"
        env:
          TURBO_API: https://turbo-cache-server-cvezib2f4q-an.a.run.app
          TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
          TURBO_TEAM: my-team

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: apps/api/go.mod
          cache: false

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: ${{ secrets.wif-provider }}
          service_account: ${{ secrets.service-account }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ inputs.REGION }}-docker.pkg.dev

      - name: Build API Docker Image
        if: steps.turbo-changes.outputs.api-changed == 'true'
        run: |
          echo "🔨 Building API Docker image (changes detected)..."
          cd apps/api
          docker build \
            --cache-from=${{ inputs.REGION }}-docker.pkg.dev/${{ inputs.PROJECT_ID }}/api-service/api:latest \
            --tag ${{ inputs.REGION }}-docker.pkg.dev/${{ inputs.PROJECT_ID }}/api-service/api:${{ github.sha }} \
            --tag ${{ inputs.REGION }}-docker.pkg.dev/${{ inputs.PROJECT_ID }}/api-service/api:latest \
            .

      - name: Push API Docker Image
        if: steps.turbo-changes.outputs.api-changed == 'true'
        run: |
          echo "📦 Pushing API Docker image to registry..."
          docker push ${{ inputs.REGION }}-docker.pkg.dev/${{ inputs.PROJECT_ID }}/api-service/api:${{ github.sha }}
          docker push ${{ inputs.REGION }}-docker.pkg.dev/${{ inputs.PROJECT_ID }}/api-service/api:latest

      - name: Setup Node.js for Frontend Build
        if: steps.turbo-changes.outputs.dashboard-changed == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "22.10.0"

      - name: Install Frontend Dependencies
        if: steps.turbo-changes.outputs.dashboard-changed == 'true'
        run: |
          echo "📦 Installing dashboard dependencies (changes detected)..."
          # クリーンインストールで依存関係の問題を回避
          rm -rf node_modules package-lock.json
          npm install

      - name: Build Frontend
        if: steps.turbo-changes.outputs.dashboard-changed == 'true'
        run: |
          echo "🔨 Building dashboard (changes detected)..."
          npm run build --workspace=dashboard

      # Step 1: API No-Traffic Deploy（変更検知時のみ実行）
      - name: Deploy API (No Traffic)
        if: steps.turbo-changes.outputs.api-changed == 'true'
        run: |
          echo "🚀 Deploying API service (no traffic)..."
          gcloud run deploy ${{ inputs.API_SERVICE_NAME }} \
            --image=${{ inputs.REGION }}-docker.pkg.dev/${{ inputs.PROJECT_ID }}/api-service/api:${{ github.sha }} \
            --region=${{ inputs.REGION }} \
            --no-traffic \
            --vpc-connector=${{ inputs.VPC_CONNECTOR_NAME }} \
            --set-env-vars="DB_HOST=10.71.0.5,DB_USER=api_user,DB_NAME=api_db,DB_PORT=5432" \
            --set-secrets="DB_PASSWORD=api-db-password:latest" \
            --service-account=api-cloud-run-sa@${{ inputs.PROJECT_ID }}.iam.gserviceaccount.com

      # Step 2: Database Migration Check（API変更時のみ実行）
      - name: Check Migration Requirements
        if: steps.turbo-changes.outputs.api-changed == 'true'
        id: migration-check
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -q "apps/api/migrations/"; then
            echo "migration-required=true" >> $GITHUB_OUTPUT
            echo "🔄 Database migration files detected"
          else
            echo "migration-required=false" >> $GITHUB_OUTPUT
            echo "✅ No migration files changed"
          fi

      - name: Run Database Migration
        if: steps.turbo-changes.outputs.api-changed == 'true' && steps.migration-check.outputs.migration-required == 'true'
        run: |
          echo "🚀 Running database migrations..."
          gcloud run jobs create migration-job-${{ github.sha }} \
            --image=${{ inputs.REGION }}-docker.pkg.dev/${{ inputs.PROJECT_ID }}/api-service/api:${{ github.sha }} \
            --region=${{ inputs.REGION }} \
            --vpc-connector=${{ inputs.VPC_CONNECTOR_NAME }} \
            --set-env-vars="DB_HOST=10.71.0.5,DB_USER=api_user,DB_NAME=api_db,DB_PORT=5432" \
            --set-secrets="DB_PASSWORD=api-db-password:latest" \
            --service-account=api-cloud-run-sa@${{ inputs.PROJECT_ID }}.iam.gserviceaccount.com \
            --command="make" \
            --args="migrate-up"
            
          gcloud run jobs execute migration-job-${{ github.sha }} --wait --region=${{ inputs.REGION }}
          echo "✅ Database migrations completed"

      # Step 3: API Traffic切り替え + ヘルスチェック（API変更時のみ実行）
      - name: Switch API Traffic
        if: steps.turbo-changes.outputs.api-changed == 'true'
        run: |
          echo "🔄 Switching API traffic to new revision..."
          gcloud run services update-traffic ${{ inputs.API_SERVICE_NAME }} \
            --region=${{ inputs.REGION }} \
            --to-latest

      - name: API Health Check
        if: steps.turbo-changes.outputs.api-changed == 'true'
        run: |
          echo "🔍 Checking API health..."
          for i in {1..30}; do
            if curl -f "${{ inputs.API_BASE_URL }}/health"; then
              echo "✅ API is healthy!"
              break
            fi
            echo "⏳ Waiting for API to be ready... ($i/30)"
            sleep 10
          done

      # Step 4: Frontend Deploy（Dashboard変更時のみ実行）
      - name: Deploy Frontend to Cloud Storage
        if: steps.turbo-changes.outputs.dashboard-changed == 'true'
        run: |
          echo "🚀 Deploying frontend to Cloud Storage..."
          # ビルドされたファイルをCloud Storageにアップロード
          gsutil -m rsync -r -d ./apps/dashboard/dist gs://${{ secrets.gcs-bucket-name }}
          gsutil -m setmeta -h "Cache-Control:public, max-age=3600" -r gs://${{ secrets.gcs-bucket-name }}/**
          echo "✅ Frontend deployed to Cloud Storage"

      - name: Invalidate CDN Cache
        if: steps.turbo-changes.outputs.dashboard-changed == 'true'
        run: |
          echo "🔄 Invalidating CDN cache..."
          gcloud compute url-maps invalidate-cdn-cache ${{ secrets.cdn-url-map-name }} \
            --path "/*" \
            --global
          echo "✅ CDN cache invalidated"

      # Step 5: 統合ヘルスチェック（変更されたサービスのみ）
      - name: Dashboard Health Check
        if: steps.turbo-changes.outputs.dashboard-changed == 'true'
        run: |
          echo "🔍 Checking Dashboard health..."
          curl -f "${{ inputs.DASHBOARD_BASE_URL }}"

      - name: Basic Integration Check
        if: steps.turbo-changes.outputs.dashboard-changed == 'true'
        run: |
          echo "🔍 Running basic integration check..."
          # Dashboard画面が正常に表示されることを確認
          if curl -s "${{ inputs.DASHBOARD_BASE_URL }}" | grep -q "<!doctype html>"; then
            echo "✅ Dashboard is serving content successfully"
          else
            echo "❌ Dashboard integration check failed"
            exit 1
          fi

      # ===== デプロイ完了レポート =====
      # Step 6: デプロイ結果サマリー生成（GitHub Actions Summary出力）
      - name: Deployment Complete
        run: |
          echo "### 🚀 Selective Deployment Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ inputs.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # 変更検知結果をサマリーに追加
          if [ "${{ steps.turbo-changes.outputs.api-changed }}" == "true" ]; then
            echo "**API:** ✅ Changes detected - Deployed" >> $GITHUB_STEP_SUMMARY
            echo "**API URL:** ${{ inputs.API_BASE_URL }}" >> $GITHUB_STEP_SUMMARY
            echo "**API Image:** ${{ inputs.REGION }}-docker.pkg.dev/${{ inputs.PROJECT_ID }}/api-service/api:${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "**API:** ⏭️ No changes detected - Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ steps.turbo-changes.outputs.dashboard-changed }}" == "true" ]; then
            echo "**Dashboard:** ✅ Changes detected - Deployed" >> $GITHUB_STEP_SUMMARY
            echo "**Dashboard URL:** ${{ inputs.DASHBOARD_BASE_URL }}" >> $GITHUB_STEP_SUMMARY
            echo "**Dashboard:** Static files deployed to Cloud Storage" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Dashboard:** ⏭️ No changes detected - Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed by:** @${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Time:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_STEP_SUMMARY
