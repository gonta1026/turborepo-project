name: Reusable Full Stack Tests
on:
  workflow_call:
    inputs:
      test-db-password:
        required: false
        type: string
        description: "Database password for tests"
    secrets:
      turbo-token:
        required: true
        description: "Turborepo remote cache authentication token"

jobs:
  # ===== Turboビルド（モノレポ全体） =====
  # Turborepoリモートキャッシュを使用したモノレポ全体のビルド・リント
  turbo-build:
    runs-on: ubuntu-latest
    environment: dev
    steps:
      - uses: actions/checkout@v4

      # Node.js環境セットアップ
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.10.0"

      # NPM依存関係のクリーンインストール
      - name: Install Dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install

      # Turboリモートキャッシュでビルド・リント実行
      - name: Build and Lint with Remote Cache
        run: |
          echo "🔍 Debugging Turbo Remote Cache Configuration"
          echo "TURBO_API: $TURBO_API"
          echo "TURBO_TOKEN length: ${#TURBO_TOKEN}"
          echo "Testing server connection..."
          curl -s -w "HTTP Status: %{http_code}\n" "$TURBO_API/v8/artifacts/events" -H "Authorization: Bearer $TURBO_TOKEN" | head -10 || echo "❌ Server connection failed"
          echo "🚀 Starting Turbo build..."
          npx turbo run build lint --verbosity=2
        env:
          TURBO_API: https://turbo-cache-server-cvezib2f4q-an.a.run.app
          TURBO_TOKEN: ${{ secrets.turbo-token }}
          TURBO_TEAM: my-team
  # API テスト（Turboビルド完了後に実行）
  test-api:
    needs: turbo-build # Turboビルド完了後に実行
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version-file: apps/api/go.mod
          cache: false

      - name: Install golang-migrate
        run: |
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.17.0/migrate.linux-amd64.tar.gz | tar xvz
          sudo mv migrate /usr/local/bin/migrate
          migrate -version

      - name: PostgreSQL Test Container
        run: |
          docker run -d --name postgres-test \
            -p 5432:5432 \
            -e POSTGRES_USER=apiuser \
            -e POSTGRES_PASSWORD=${{ inputs.test-db-password }} \
            -e POSTGRES_DB=apidb \
            postgres:17-alpine
            
          # Wait for PostgreSQL
          until docker exec postgres-test pg_isready -U apiuser; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run Database Migrations
        run: |
          cd apps/api
          migrate -path migrations -database "postgres://$DB_USER:$DB_PASSWORD@$DB_HOST:$DB_PORT/$DB_NAME?sslmode=disable" up
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_USER: apiuser
          DB_PASSWORD: ${{ inputs.test-db-password }}
          DB_NAME: apidb

      - name: Run API Tests
        run: |
          cd apps/api
          go test -v ./...
        env:
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_USER: apiuser
          DB_PASSWORD: ${{ inputs.test-db-password }}
          DB_NAME: apidb

  # Dashboard テスト（Turboビルド完了後に実行）
  test-dashboard:
    needs: turbo-build # Turboビルド完了後に実行
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22.10.0"

      # 依存関係のインストール（ビルドは turbo-build で完了済み）
      - name: Install Dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install

      # Dashboardコンポーネントテスト実行
      - name: Run Dashboard Tests
        run: |
          npm run test --workspace=dashboard
